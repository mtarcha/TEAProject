Невеличке пояснення того, що написано і запрограмовано в проекті:

1. Бібліотека Encode_DecodeAlgorithms.

Вона містить клас Algorithm. Він,  свою чергу має два методи (на вхід отримують назву алгоритму кодування/декодування),
що повертають інтерфейси відповідних енкрипторів і декрипторів.
Інтерфейси мають по отдному методові (для кодування/декодування).
Ці інтерфейси реалізують класи TEAEncryptor i TEADecryptor.
в цих класах є одна тонкість: як відомо, вхідна інформація ділиться на блоки по 64 біти.
Проте, в останньому блоці, може не вистачати бітів, тому вони повинні дозаповнюватись.
Я заповнюю їх одиничками, а в останній байт записую число доданих байтів.
Це потрібно мені для того, щоб при декодуванні можна було вилучити, додані при кодуванні, байти.


2.AlgorithmTest

В цьому проекті створено декілька Юніт тестів, для провірки коректності написаних в бібліотеці методів кодування.


3.UsingTEA

Ця програма демонструє деякі можливості використання вищеописаної бібліотеки.
Її робота залежить від вхідних аргументів, поданих з консолі комп’ютера.

	3.1. Якщо аргументів немає, то відкриється консоль програми, і
	буде можливість закодувати інформацію з певного файлу.

	3.2. Якщо запустити програму з консолі компютера,
	В наступному вигляді:
	(exe файл програми -e/-d -name AlgorithmName -input inputfile -output outputfile -key (16-sumbol Key))
	то, в залежності від специфікатора -e/-d (закодувати або розкодувати) інформація з вхідного
	файлу закодується/розкодується у вихідний файл.
	СПЕЦИФІКАТОР -e/-d ОБОВЯЗКОВО ПОВИНЕН БУТИ НА 1 ПОЗИЦІЇ ПІСЛЯ НАЗВИ exe ФАЙЛУ.
	Приклад: UsingTEA.exe -e -name TEA -key 0123456789abcdef -input b:\tests\source.txt -output b:\tests\encfile.txt

	3.3. Працює схоже на 3.2., проте замість вхідого файлу, інформація для кодування
	 записується беспосередньо після спецефікатора -data
	Наприклад: UsingTEA.exe -e -name TEA -key 0123456789abcdef -data asdgege125s
	Після виконання кодування, закодована інформація виведеться на консоль.
	Подібним чином можемо розкодувати інформацію, замінивши -e на -d та змінивши дані для розкодування.
	Для чого написана ця частина програми?
	Для кодування трафіку TCP/IP.
	Із-за браку знань в цій області, не змогла протестувати можливість використання, проте ідея наступна:
	Сервер TCP/IP вставляє в консоль вхідні дані(що повинні закодуватись) після специфікатора -data, 
	зі своїм ключом. Після цього програма виводить на консоль вхідні дані в закодованому вигляді,
	які сервер, по-ідеї, міг би використовувати у своїх подальших цілях.




